*** single or multiple files to upload the image to cloudinary ***

// post.entity.ts

import mongoose, { Schema, Document } from "mongoose";

export interface Post extends Document {
    postOwner: string;
    bookName: string;
    authorName: string;
    description: string;
    price: number;
    image: string;
    coverImage: string[];
}

const PostSchema: Schema = new Schema(
  {
    postOwner: { type: Schema.Types.ObjectId, ref: "User", required: true },
    bookName: { type: String, required: true },
    authorName: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    image: { type: String, required: true },
    coverImage: { type: [String], required: true }
  },
  { timestamps: true }
);

export default mongoose.model<Post>("Post", PostSchema);


// post.controller.ts

interface MulterFiles {
    [fieldname: string]: Express.Multer.File[];
  }

public createPost = async (
    req: AuthRequest,
    res: Response,
    next: NextFunction
  ): Promise<any> => {
    try {
      const { postOwner, bookName, authorName, description, price } = req.body;

      const user = await User.findOne({ _id: postOwner });
      if (!user) {
        return res.status(400).json({ message: "Owner is not found!" });
      }

        if (!bookName || !authorName || !description || !price) {
            return res.status(400).json({ message: "All fields are required" });
        }
    
        if (isNaN(price)) {
            return res.status(400).json({ message: "Price must be a number" });
        }

        const files = req.files as MulterFiles;

        const coverImage = files['coverImage'];
        const image = files['image']?.[0].path;

      if (!req.files) {
        return res.status(400).json({ message: "Image upload failed" });
      }

      const uploadResult = await uploadOnCloudinary(image, 'image');
      const uploadedCoverImages = await Promise.all(
        coverImage.map(file => uploadOnCloudinary(file.path, `coverImage/${user._id}`))
      );
      const coverImageUrls = uploadedCoverImages.map((result: any) => result.secure_url);
      
      if (!uploadResult) {
        return res.status(500).json({ message: "Image upload on cloudinary failed" });
      }

      const newBook = {
        bookName,
        authorName,
        description,
        price: parseFloat(price),
        image: `${uploadResult.secure_url}`,
        coverImage: coverImageUrls,
        postOwner: postOwner,
      };
      const post = new postEntity(newBook);
      await post.save();

      return res.status(201).json({
        message: "Book created successfully",
        book: newBook,
      });
    } catch (error) {
      console.error("Error creating book:", error);
      next(error);
    }
  };

// post.routes.ts

 router.post("/create-post", upload.single('image'), authMiddleware, bookController.createPost); // here upload middleware is used to upload single image
 router.post("/create-post", upload.fields([{ name: 'image', maxCount: 1 }, { name: 'coverImage', maxCount: 8 }]), authMiddleware, productController.createPost); // for multiple images

 IMP : upload.single('image') here image is name as per databse entity field or postman field name

 *** pdfs upload to cloudinary ***

// post.controller.ts

create an endpoint to upload pdf on cloudinary (practice purpose)
  public createPdf = async (req: Request, res: Response, next: NextFunction): Promise<any> => {
    try {

      const files = req.files as MulterFiles;
      console.log("ðŸš€ ~ BookController ~ createPdf= ~ files:", files)
      const pdfFile = files['pdf']?.[0].path;
      console.log("ðŸš€ ~ BookController ~ createPdf= ~ pdfFile:", pdfFile)
      const pdfFiles = files['pdfs'];

      if (!req.files) {
        return res.status(400).json({ message: "PDF upload failed" });
      }

      const uploadResult = await uploadPDFOnCloudinary(pdfFile);
      const uploadedPdfFiles = await Promise.all(
        pdfFiles.map(file => uploadPDFOnCloudinary(file.path))
      );
      console.log("ðŸš€ ~ BookController ~ createPdf= ~ uploadedPdfFiles:", uploadedPdfFiles)

      if (!uploadResult) {
        return res.status(500).json({ message: "PDF upload on cloudinary failed" });
      }

      const newPdf = {
        pdf: `${uploadResult.secure_url}`,
        pdfs: uploadedPdfFiles.map((result: any) => result.secure_url),
      };
      const post = new pdfEntity(newPdf);
      await post.save();

      return res.status(201).json({
        message: "PDF created successfully",
        book: newPdf,
      });
    } catch (error) {
      console.error("Error creating PDF:", error);
      next(error);
    }
  }

// post.routes.ts

router.post("/create-pdf", upload.fields([{ name: 'pdf', maxCount: 1 }, { name: 'pdfs', maxCount: 8 }]), authMiddleware, bookController.createPdf); // for multiple pdfs

// cloudinary.ts

// for both image and pdfs

import { v2 as cloudinary } from 'cloudinary';
import fs from 'fs';

cloudinary.config({ 
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME, 
    api_key: process.env.CLOUDINARY_API_KEY, 
    api_secret: process.env.CLOUDINARY_API_SECRET
});

// Function to upload an image to Cloudinary
const uploadOnCloudinary = async (localpath: string, folderName: string) => {
    try{
        const uploadResult = await cloudinary.uploader.upload(localpath, {
            resource_type: 'auto',
            folder: `booklist/${folderName}`,
            use_filename: true,
            unique_filename: false,
            overwrite: true,
        });
        fs.unlinkSync(localpath); 
        return uploadResult

    }catch (error) {
        fs.unlinkSync(localpath); 
        console.error("Error uploading to Cloudinary:", error);
        throw new Error("Cloudinary upload failed");
    }    
}

const uploadPDFOnCloudinary = async (localpath: string) => {
    try{
        const uploadResult = await cloudinary.uploader.upload(localpath, {
            resource_type: 'raw',
            folder: `pdfs`,
            
        });
        // fs.unlinkSync(localpath); 
        return uploadResult
    } catch (error){
        fs.unlinkSync(localpath);
        console.error("Error uploading PDF to Cloudinary:", error);
        throw new Error("Cloudinary PDF upload failed");
    }
}

export { uploadOnCloudinary, uploadPDFOnCloudinary };